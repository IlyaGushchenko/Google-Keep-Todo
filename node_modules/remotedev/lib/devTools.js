'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

exports.__esModule = true;
exports.start = start;
exports.send = send;
exports.subscribe = subscribe;
exports.init = init;

var _jsan = require('jsan');

var _socketclusterClient = require('socketcluster-client');

var _socketclusterClient2 = _interopRequireDefault(_socketclusterClient);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var instanceName = undefined;
var socket = undefined;
var channel = undefined;
var nextActionId = 1;
var listeners = [];

function handleMessages(message) {
  if (message.type === 'DISPATCH' && message.state) {
    (function () {
      var parsedState = (0, _jsan.parse)(message.state);
      listeners.forEach(function (listener) {
        return listener(parsedState);
      });
    })();
  }
}

function connect(options) {
  if (socket) return;
  socket = _socketclusterClient2.default.connect(options);
}

function watch() {
  if (channel) return;
  socket.emit('login', 'master', function (err, channelName) {
    if (err) {
      console.error(err);return;
    }
    channel = socket.subscribe(channelName);
    channel.watch(handleMessages);
    socket.on(channelName, handleMessages);
  });
}

function start(options) {
  if (options) {
    instanceName = options.name;
  }
  connect(options && options.port ? options : _constants.socketOptions);
}

function transformAction(action) {
  if ((typeof action === 'undefined' ? 'undefined' : _typeof(action)) === 'object') {
    if (!action.timestamp) action.timestamp = Date.now();
    if (!action.type) action.type = action.id || action.actionType || '';
    return action;
  }
  if (typeof action === 'string') return { type: action, timestamp: Date.now() };
  return '';
}

function send(action, state, options) {
  start(options);
  setTimeout(function () {
    var message = {
      payload: state ? (0, _jsan.stringify)(state) : '',
      action: transformAction(action),
      type: action !== undefined ? 'ACTION' : 'INIT',
      nextActionId: nextActionId || '',
      id: socket.id,
      name: instanceName
    };
    nextActionId++;
    socket.emit(socket.id ? 'log' : 'log-noid', message);
  }, 0);
}

function subscribe(listener, options) {
  start(options);
  watch();
  listeners.push(listener);

  return function unsubscribe() {
    var index = listeners.indexOf(listener);
    listeners.splice(index, 1);
  };
}

function init() {
  var state = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var options = arguments[1];

  nextActionId = 1;
  start(options);
  send(undefined, state, options);
}

exports.default = { init: init, send: send, subscribe: subscribe };